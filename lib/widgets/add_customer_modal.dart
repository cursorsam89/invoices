// widgets/add_customer_modal.dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../models/customer.dart';
import '../models/invoice.dart';
import '../services/supabase_service.dart';
import 'package:provider/provider.dart';
import '../state/app_state.dart';

class AddCustomerModal extends StatefulWidget {
  const AddCustomerModal({super.key});

  @override
  State<AddCustomerModal> createState() => _AddCustomerModalState();
}

class _AddCustomerModalState extends State<AddCustomerModal> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _amountController = TextEditingController();
  final _descriptionController = TextEditingController();

  int _repeat = 1;
  DateTime _startDate = DateTime.now();
  bool _isLoading = false;

  @override
  void dispose() {
    _nameController.dispose();
    _amountController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  Future<void> _selectDate() async {
    final picked = await showDatePicker(
      context: context,
      initialDate: _startDate,
      firstDate: DateTime.now().subtract(const Duration(days: 365)),
      lastDate: DateTime.now().add(const Duration(days: 365)),
    );

    if (picked != null) {
      setState(() {
        _startDate = picked;
      });
    }
  }

  DateTime get _endDate {
    return DateTime(
      _startDate.year,
      _startDate.month + _repeat,
      _startDate.day,
    );
  }

  Future<void> _saveCustomer() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      // Create customer
      final customer = Customer(
        id: '', // Will be generated by Supabase
        userId: SupabaseService().currentUser!.id,
        name: _nameController.text.trim(),
        amount: _amountController.text.isNotEmpty
            ? double.parse(_amountController.text)
            : null,
        description: _descriptionController.text.trim().isEmpty
            ? null
            : _descriptionController.text.trim(),
        repeat: _repeat,
        startDate: _startDate,
        endDate: _endDate,
        createdAt: DateTime.now(),
      );
      // Debug prints to terminal
      print(
        '[AddCustomerModal] Creating customer with: '
                '{userId: ' +
            customer.userId +
            ', name: ' +
            customer.name +
            ', amount: ' +
            (customer.amount?.toString() ?? 'null') +
            ', description: ' +
            (customer.description ?? 'null') +
            ', repeat: ' +
            customer.repeat.toString() +
            ', start_date: ' +
            customer.startDate.toIso8601String() +
            ', end_date: ' +
            customer.endDate.toIso8601String() +
            '}',
      );

      final savedCustomer = await SupabaseService().createCustomer(customer);

      // Generate invoices if amount is provided
      if (customer.amount != null && customer.amount! > 0) {
        await _generateInvoices(savedCustomer);
      }

      if (mounted) {
        final appState = Provider.of<AppState>(context, listen: false);
        appState.onCustomerAdded(savedCustomer);
        await appState.recomputeTotals();
        Navigator.of(context).pop(savedCustomer);
      }
    } catch (e, st) {
      // Also log to terminal for debugging
      print('[AddCustomerModal] Error creating customer: ' + e.toString());
      print(st);
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error creating customer: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _generateInvoices(Customer customer) async {
    final amount = customer.amount!;
    final dueDates = <DateTime>[];

    // Generate due dates
    for (int i = 0; i < customer.repeat; i++) {
      dueDates.add(
        DateTime(
          customer.startDate.year,
          customer.startDate.month + i,
          customer.startDate.day,
        ),
      );
    }

    // Create invoices
    for (int i = 0; i < dueDates.length; i++) {
      final invoice = Invoice(
        id: '', // Will be generated by Supabase
        customerId: customer.id,
        dueDate: dueDates[i],
        amount: amount,
        status: InvoiceStatus.pending,
        paidAmount: 0,
        description: customer.description,
        createdAt: DateTime.now(),
      );

      await SupabaseService().createInvoice(invoice);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: Container(
        constraints: const BoxConstraints(maxWidth: 500, maxHeight: 700),
        child: Padding(
          padding: const EdgeInsets.all(24),
          child: Form(
            key: _formKey,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Header - Fixed at top
                Row(
                  children: [
                    Icon(
                      Icons.person_add,
                      color: Theme.of(context).primaryColor,
                      size: 24,
                    ),
                    const SizedBox(width: 8),
                    Text(
                      'Add New Customer',
                      style: Theme.of(context).textTheme.headlineSmall
                          ?.copyWith(fontWeight: FontWeight.bold),
                    ),
                    const Spacer(),
                    IconButton(
                      icon: const Icon(Icons.close),
                      onPressed: () => Navigator.of(context).pop(),
                    ),
                  ],
                ),
                const SizedBox(height: 24),

                // Scrollable content
                Expanded(
                  child: SingleChildScrollView(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Row(
                        //   children: [
                        //     Icon(
                        //       Icons.person_add,
                        //       color: Theme.of(context).primaryColor,
                        //       size: 24,
                        //     ),
                        //     //  const SizedBox(width: 8),
                        //     // Text(
                        //     //   'Add New Customer',
                        //     //   style: Theme.of(context).textTheme.headlineSmall
                        //     //       ?.copyWith(fontWeight: FontWeight.bold),
                        //     // ),
                        //   ],
                        // ),
                        const SizedBox(height: 24),

                        // Name Field
                        TextFormField(
                          controller: _nameController,
                          decoration: const InputDecoration(
                            labelText: 'Customer Name *',
                            prefixIcon: Icon(Icons.person),
                            border: OutlineInputBorder(),
                          ),
                          validator: (value) {
                            if (value == null || value.trim().isEmpty) {
                              return 'Please enter customer name';
                            }
                            return null;
                          },
                        ),
                        const SizedBox(height: 16),

                        // Amount Field
                        TextFormField(
                          controller: _amountController,
                          keyboardType: const TextInputType.numberWithOptions(
                            decimal: true,
                          ),
                          inputFormatters: [
                            FilteringTextInputFormatter.allow(
                              RegExp(r'^\d*\.?\d*'),
                            ),
                          ],
                          decoration: const InputDecoration(
                            labelText: 'Amount (Optional)',
                            prefixIcon: Icon(Icons.attach_money),
                            border: OutlineInputBorder(),
                            hintText: 'e.g., 1000',
                          ),
                        ),
                        const SizedBox(height: 16),

                        // Description Field
                        TextFormField(
                          controller: _descriptionController,
                          maxLines: 3,
                          decoration: const InputDecoration(
                            labelText: 'Description (Optional)',
                            prefixIcon: Icon(Icons.description),
                            border: OutlineInputBorder(),
                            hintText: 'Enter any additional details...',
                          ),
                        ),
                        const SizedBox(height: 16),

                        // Repeat Field
                        Row(
                          children: [
                            const Icon(Icons.repeat),
                            const SizedBox(width: 8),
                            const Text('Repeat:'),
                            const SizedBox(width: 16),
                            Expanded(
                              child: DropdownButtonFormField<int>(
                                value: _repeat,
                                decoration: const InputDecoration(
                                  border: OutlineInputBorder(),
                                ),
                                items: List.generate(12, (index) => index + 1)
                                    .map(
                                      (value) => DropdownMenuItem(
                                        value: value,
                                        child: Text(
                                          '$value month${value > 1 ? 's' : ''}',
                                        ),
                                      ),
                                    )
                                    .toList(),
                                onChanged: (value) {
                                  setState(() {
                                    _repeat = value!;
                                  });
                                },
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 16),

                        // Start Date Field
                        InkWell(
                          onTap: _selectDate,
                          child: InputDecorator(
                            decoration: const InputDecoration(
                              labelText: 'Start Date',
                              prefixIcon: Icon(Icons.calendar_today),
                              border: OutlineInputBorder(),
                            ),
                            child: Text(
                              '${_startDate.day}/${_startDate.month}/${_startDate.year}',
                            ),
                          ),
                        ),
                        const SizedBox(height: 16),

                        // End Date Display
                        Container(
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: Colors.grey[100],
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Row(
                            children: [
                              const Icon(Icons.event, size: 20),
                              const SizedBox(width: 8),
                              Text(
                                'End Date: ${_endDate.day}/${_endDate.month}/${_endDate.year}',
                                style: Theme.of(context).textTheme.bodyMedium,
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),

                // Action Buttons - Fixed at bottom
                const SizedBox(height: 24),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: _isLoading
                          ? null
                          : () => Navigator.of(context).pop(),
                      child: const Text('Cancel'),
                    ),
                    const SizedBox(width: 16),
                    ElevatedButton(
                      onPressed: _isLoading ? null : _saveCustomer,
                      child: _isLoading
                          ? const SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(strokeWidth: 2),
                            )
                          : const Text('Save Customer'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
