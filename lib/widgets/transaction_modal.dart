// widgets/transaction_modal.dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../models/customer.dart';
import '../models/invoice.dart';
import '../models/transaction.dart';
import '../services/supabase_service.dart';
import '../utils/date_formatter.dart';

class TransactionModal extends StatefulWidget {
  final Invoice invoice;
  final Customer customer;

  const TransactionModal({
    super.key,
    required this.invoice,
    required this.customer,
  });

  @override
  State<TransactionModal> createState() => _TransactionModalState();
}

class _TransactionModalState extends State<TransactionModal> {
  final _formKey = GlobalKey<FormState>();
  final _amountController = TextEditingController();
  DateTime _paymentDate = DateTime.now();
  List<Transaction> _transactions = [];
  bool _isLoading = false;
  bool _showHistory = false;

  @override
  void initState() {
    super.initState();
    _loadTransactions();
    _setupStreams();
  }

  @override
  void dispose() {
    _amountController.dispose();
    super.dispose();
  }

  void _setupStreams() {
    SupabaseService().streamTransactionsByInvoice(widget.invoice.id).listen((
      transactions,
    ) {
      setState(() {
        _transactions = transactions;
      });
    });
  }

  Future<void> _loadTransactions() async {
    try {
      final transactions = await SupabaseService().getTransactionsByInvoice(
        widget.invoice.id,
      );
      setState(() {
        _transactions = transactions;
      });
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error loading transactions: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  Future<void> _selectDate() async {
    final picked = await showDatePicker(
      context: context,
      initialDate: _paymentDate,
      firstDate: DateTime.now().subtract(const Duration(days: 365)),
      lastDate: DateTime.now().add(const Duration(days: 30)),
    );

    if (picked != null) {
      setState(() {
        _paymentDate = picked;
      });
    }
  }

  Future<void> _addTransaction() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      final amount = double.parse(_amountController.text);

      // Create transaction
      final transaction = Transaction(
        id: '', // Will be generated by Supabase
        invoiceId: widget.invoice.id,
        amount: amount,
        paymentDate: _paymentDate,
        status: TransactionStatus.active,
        createdAt: DateTime.now(),
      );

      final savedTransaction = await SupabaseService().createTransaction(
        transaction,
      );

      // Update invoice paid amount
      final updatedInvoice = widget.invoice.copyWith(
        paidAmount: widget.invoice.paidAmount + amount,
        status: (widget.invoice.paidAmount + amount) >= widget.invoice.amount
            ? InvoiceStatus.paid
            : widget.invoice.status,
      );

      await SupabaseService().updateInvoice(updatedInvoice);

      // Optimistic update: reflect new transaction immediately in modal
      setState(() {
        _transactions = [savedTransaction, ..._transactions];
      });

      if (mounted) {
        Navigator.of(context).pop(savedTransaction);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error adding transaction: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _cancelTransaction(Transaction transaction) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Cancel Transaction'),
        content: Text(
          'Are you sure you want to cancel this payment of ${DateFormatter.formatCurrency(transaction.amount)}?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('No'),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Yes, Cancel'),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      try {
        // Update transaction status to cancelled
        final updatedTransaction = transaction.copyWith(
          status: TransactionStatus.cancelled,
        );
        await SupabaseService().updateTransaction(updatedTransaction);

        // Revert invoice paid amount
        final updatedInvoice = widget.invoice.copyWith(
          paidAmount: widget.invoice.paidAmount - transaction.amount,
          status: InvoiceStatus.pending,
        );
        await SupabaseService().updateInvoice(updatedInvoice);

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Transaction cancelled successfully!'),
              backgroundColor: Colors.green,
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Error cancelling transaction: ${e.toString()}'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: Container(
        constraints: const BoxConstraints(maxWidth: 600, maxHeight: 700),
        child: Padding(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header
              Row(
                children: [
                  Icon(
                    Icons.payment,
                    color: Theme.of(context).primaryColor,
                    size: 24,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    'Add Payment',
                    style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const Spacer(),
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                ],
              ),
              const SizedBox(height: 16),

              // Customer Info
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Customer: ${widget.customer.name}',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      'Total Due: ${DateFormatter.formatCurrency(widget.invoice.amount)}',
                      style: Theme.of(context).textTheme.bodyMedium,
                    ),
                    Text(
                      'Paid: ${DateFormatter.formatCurrency(widget.invoice.paidAmount)}',
                      style: Theme.of(
                        context,
                      ).textTheme.bodyMedium?.copyWith(color: Colors.green),
                    ),
                    Text(
                      'Remaining: ${DateFormatter.formatCurrency(widget.invoice.remainingAmount)}',
                      style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        color: Colors.red,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    if (widget.invoice.isOverdue) ...[
                      const SizedBox(height: 4),
                      Text(
                        'Overdue: ${widget.invoice.overdueDays} days',
                        style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                          color: Colors.red,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ],
                ),
              ),
              const SizedBox(height: 24),

              // Toggle between Add Payment and History
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () => setState(() => _showHistory = false),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: !_showHistory
                            ? Theme.of(context).primaryColor
                            : Colors.grey[300],
                        foregroundColor: !_showHistory
                            ? Colors.white
                            : Colors.black,
                      ),
                      child: const Text('Add Payment'),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () => setState(() => _showHistory = true),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: _showHistory
                            ? Theme.of(context).primaryColor
                            : Colors.grey[300],
                        foregroundColor: _showHistory
                            ? Colors.white
                            : Colors.black,
                      ),
                      child: Text('History (${_transactions.length})'),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 24),

              // Content based on toggle
              if (!_showHistory) ...[
                // Add Payment Form
                Form(
                  key: _formKey,
                  child: Column(
                    children: [
                      TextFormField(
                        controller: _amountController,
                        keyboardType: const TextInputType.numberWithOptions(
                          decimal: true,
                        ),
                        inputFormatters: [
                          FilteringTextInputFormatter.allow(
                            RegExp(r'^\d*\.?\d*'),
                          ),
                        ],
                        decoration: InputDecoration(
                          labelText: 'Amount *',
                          prefixIcon: const Icon(Icons.attach_money),
                          border: const OutlineInputBorder(),
                          hintText: 'Enter payment amount',
                        ),
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter amount';
                          }
                          final amount = double.tryParse(value);
                          if (amount == null || amount <= 0) {
                            return 'Please enter a valid amount';
                          }
                          if (amount > widget.invoice.remainingAmount) {
                            return 'Amount cannot exceed remaining due';
                          }
                          return null;
                        },
                      ),
                      const SizedBox(height: 16),
                      InkWell(
                        onTap: _selectDate,
                        child: InputDecorator(
                          decoration: const InputDecoration(
                            labelText: 'Payment Date',
                            prefixIcon: Icon(Icons.calendar_today),
                            border: OutlineInputBorder(),
                          ),
                          child: Text(
                            DateFormatter.formatDisplayDate(_paymentDate),
                          ),
                        ),
                      ),
                      const SizedBox(height: 24),
                      SizedBox(
                        width: double.infinity,
                        height: 48,
                        child: ElevatedButton(
                          onPressed: _isLoading ? null : _addTransaction,
                          child: _isLoading
                              ? const SizedBox(
                                  width: 20,
                                  height: 20,
                                  child: CircularProgressIndicator(
                                    strokeWidth: 2,
                                  ),
                                )
                              : const Text('Add Payment'),
                        ),
                      ),
                    ],
                  ),
                ),
              ] else ...[
                // Transaction History
                Expanded(
                  child: _transactions.isEmpty
                      ? const Center(child: Text('No transactions yet'))
                      : ListView.builder(
                          itemCount: _transactions.length,
                          itemBuilder: (context, index) {
                            final transaction = _transactions[index];
                            return Card(
                              margin: const EdgeInsets.only(bottom: 8),
                              child: ListTile(
                                leading: Icon(
                                  transaction.isActive
                                      ? Icons.check_circle
                                      : Icons.cancel,
                                  color: transaction.isActive
                                      ? Colors.green
                                      : Colors.red,
                                ),
                                title: Text(
                                  DateFormatter.formatCurrency(
                                    transaction.amount,
                                  ),
                                  style: TextStyle(
                                    color: transaction.isActive
                                        ? Colors.green
                                        : Colors.red,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                subtitle: Text(
                                  DateFormatter.formatDisplayDate(
                                    transaction.paymentDate,
                                  ),
                                ),
                                trailing: transaction.isActive
                                    ? IconButton(
                                        icon: const Icon(
                                          Icons.cancel,
                                          color: Colors.red,
                                        ),
                                        onPressed: () =>
                                            _cancelTransaction(transaction),
                                        tooltip: 'Cancel Transaction',
                                      )
                                    : null,
                              ),
                            );
                          },
                        ),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }
}
